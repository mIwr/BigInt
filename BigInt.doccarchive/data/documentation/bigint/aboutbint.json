{"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms"],"anchor":"Articles","title":"Articles"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt"},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bigint\/aboutbint"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/BInt","isActive":true},{"text":" values are represented with magnitude and sign:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The magnitude is an array of unsigned 64 bit integers (a.k.a. Limbs)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The sign is a boolean value, "},{"type":"codeVoice","code":"true"},{"type":"text","text":" means value < 0, "},{"code":"false","type":"codeVoice"},{"text":" means value >= 0","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The representation is little-endian, least significant Limb has index 0","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"The representation is minimal, there is no leading zero Limbs. The exception is that the value 0 is represented as a single 64 bit zero Limb and sign ","type":"text"},{"type":"codeVoice","code":"false"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"type":"heading","text":"Creating BInt’s","anchor":"Creating-BInts"},{"syntax":"swift","code":["\/\/ From an integer","let a = BInt(27)","","\/\/ From a decimal value","let x = BInt(1.12345e30) \/\/ x = 1123450000000000064996914495488","","\/\/ From string literals","let b = BInt(\"123456789012345678901234567890\")!","let c = BInt(\"1234567890abcdef1234567890abcdef\", radix: 16)!","","\/\/ From magnitude and sign","let m: Limbs = [1, 2, 3]","let d = BInt(m) \/\/ d = 1020847100762815390427017310442723737601","let e = BInt(m, true) \/\/ e = -1020847100762815390427017310442723737601","","\/\/ From a big-endian 2's complement byte array","let f = BInt(signed: [255, 255, 127]) \/\/ f = -129","","\/\/ From a big-endian magnitude byte array","let g = BInt(magnitude: [255, 255, 127]) \/\/ g = 16777087","","\/\/ Random value with specified bitwidth","let h = BInt(bitWidth: 43) \/\/ For example h = 3965245974702 (=0b111001101100111011000100111110100010101110)","","\/\/ Random value less than a given value","let i = h.randomLessThan() \/\/ For example i = 583464003284"],"type":"codeListing"},{"level":3,"text":"Converting BInt’s","type":"heading","anchor":"Converting-BInts"},{"code":["let x = BInt(16777087)","","\/\/ To double","let d = x.asDouble() \/\/ d = 16777087.0","","\/\/ To strings","let s1 = x.asString() \/\/ s1 = \"16777087\"","let s2 = x.asString(radix: 16) \/\/ s2 = \"ffff7f\"","","\/\/ To big-endian magnitude byte array","let b1 = x.asMagnitudeBytes() \/\/ b1 = [255, 255, 127]","","\/\/ To big-endian 2's complement byte array","let b2 = x.asSignedBytes() \/\/ b2 = [0, 255, 255, 127]"],"type":"codeListing","syntax":"swift"},{"anchor":"Operations","text":"Operations","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The operations available to "},{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/BInt","type":"reference","isActive":true},{"text":" are:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Arithmetic:"}]},{"type":"text","text":" addition, subtraction, multiplication, division, exponentiation, remainder and modulus, gcd and lcm"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Comparison:"}],"type":"strong"},{"type":"text","text":" the six standard operations ==  !=  <  <=  >  >="}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Shift Operations:"}],"type":"strong"},{"text":" logical left- and right shifts","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Bit Operations:","type":"text"}]},{"text":" logical and, or, xor, not, bit manipulation","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Root Extraction:"}]},{"type":"text","text":" sqrt, sqrtMod, sqrtRemainder, isPerfectSquare, root, rootRemainder, isPerfectRoot"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Prime Number:","type":"text"}]},{"type":"text","text":" probablePrime, nextPrime, isProbablyPrime, primorial"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Miscellaneous:","type":"text"}],"type":"strong"},{"text":" randomLessThan, binomial, factorial, fibonacci, jacobiSymbol, kroneckerSymbol, lucas","type":"text"}]}]}]}]}],"metadata":{"role":"article","roleHeading":"Article","title":"About BInt","modules":[{"name":"BigInt"}]},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/bigint.BigInt\/documentation\/BigInt"]]},"abstract":[{"type":"text","text":"Signed integers of unbounded size"}],"sections":[],"references":{"doc://bigint.BigInt/documentation/BigInt/BInt":{"title":"BInt","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/BInt","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BInt","kind":"identifier"}],"abstract":[{"type":"text","text":"The BInt structure"}],"navigatorTitle":[{"text":"BInt","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/bigint\/bint"},"doc://bigint.BigInt/documentation/BigInt/AboutCRT":{"type":"topic","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","kind":"article","abstract":[{"text":"Chinese Remainder Theorem","type":"text"}],"title":"About CRT","url":"\/documentation\/bigint\/aboutcrt","role":"article"},"doc://bigint.BigInt/documentation/BigInt":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt","url":"\/documentation\/bigint","kind":"symbol","title":"BigInt","abstract":[{"type":"text","text":"Signed integers and fractions of unbounded size"}],"role":"collection","type":"topic"},"doc://bigint.BigInt/documentation/BigInt/References":{"type":"topic","title":"References","url":"\/documentation\/bigint\/references","role":"article","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","kind":"article"},"doc://bigint.BigInt/documentation/BigInt/AboutBFraction":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","abstract":[{"text":"Signed fractions with numerator and denominator of unbounded size","type":"text"}],"url":"\/documentation\/bigint\/aboutbfraction","type":"topic","role":"article","title":"About BFraction","kind":"article"},"doc://bigint.BigInt/documentation/BigInt/Algorithms":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms","role":"article","kind":"article","abstract":[{"text":"Some of the algorithms used in BigInt are described below","type":"text"}],"title":"Algorithms","url":"\/documentation\/bigint\/algorithms","type":"topic"},"doc://bigint.BigInt/documentation/BigInt/Performance":{"type":"topic","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","kind":"article","abstract":[{"text":"Execution times for certain BigInt operations","type":"text"}],"title":"Performance","url":"\/documentation\/bigint\/performance","role":"article"}}}