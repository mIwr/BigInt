{"metadata":{"role":"article","roleHeading":"Article","title":"Algorithms","modules":[{"name":"BigInt"}]},"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/BigInt\/documentation\/BigInt\/Algorithms"},"seeAlsoSections":[{"anchor":"Articles","title":"Articles","generated":true,"identifiers":["doc:\/\/BigInt\/documentation\/BigInt\/AboutBInt","doc:\/\/BigInt\/documentation\/BigInt\/AboutBFraction","doc:\/\/BigInt\/documentation\/BigInt\/AboutCRT","doc:\/\/BigInt\/documentation\/BigInt\/Performance","doc:\/\/BigInt\/documentation\/BigInt\/References"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bigint\/algorithms"]}],"sections":[],"abstract":[{"type":"text","text":"Some of the algorithms used in BigInt are described below"}],"hierarchy":{"paths":[["doc:\/\/BigInt\/documentation\/BigInt"]]},"primaryContentSections":[{"content":[{"type":"heading","anchor":"","text":"","level":2},{"type":"heading","text":"Multiplication","level":3,"anchor":"Multiplication"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Schonhage-Strassen FFT based algorithm for numbers with more than 384.000 bits"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"ToomCook-3 algorithm for numbers with more than 12.800 bits"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Karatsuba algorithm for numbers with more than 6.400 bits"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Basecase - Knuth algorithm M","type":"text"}]}]}]},{"text":"Division and Remainder","level":3,"anchor":"Division-and-Remainder","type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Burnikel-Ziegler algorithm for divisors with more than 3.840 bits provided the dividend has at least 3.840 bits more than the divisor"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Basecase - Knuth algorithm D","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Exact Division - Jebelean’s exact division algorithm","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","text":"Greatest Common Divisor","anchor":"Greatest-Common-Divisor","level":3},{"items":[{"content":[{"inlineContent":[{"text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 128.000 bits","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 for smaller numbers, with binary GCD basecase","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","text":"Extended Greatest Common Divisor","anchor":"Extended-Greatest-Common-Divisor","level":3},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 64.000 bits, with extra logic to track cofactors","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 and exercise 18 for smaller numbers","type":"text"}],"type":"paragraph"}]}]},{"level":3,"text":"Modular Exponentiation","anchor":"Modular-Exponentiation","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Sliding window algorithm 14.85 from [HANDBOOK] using Barrett reduction algorithm 14.42","type":"text"}]},{"level":3,"type":"heading","anchor":"Inverse-Modulus","text":"Inverse Modulus"},{"type":"paragraph","inlineContent":[{"text":"If the modulus is a (not too large) power of 2, the algorithm from [KOC] section 7,","type":"text"},{"type":"text","text":" "},{"text":"else it is computed via the extended GCD algorithm","type":"text"}]},{"level":3,"type":"heading","anchor":"Square-Root","text":"Square Root"},{"type":"paragraph","inlineContent":[{"text":"Algorithm 1.12 (SqrtRem) from [BRENT] with algorithm 9.2.11 from [CRANDALL] as basecase","type":"text"}]},{"level":3,"type":"heading","text":"Square Root Modulo a Prime Number","anchor":"Square-Root-Modulo-a-Prime-Number"},{"type":"paragraph","inlineContent":[{"text":"Algorithm 2.3.8 from [CRANDALL]","type":"text"}]},{"level":3,"type":"heading","anchor":"Random-Numbers","text":"Random Numbers"},{"inlineContent":[{"text":"Random BInt numbers are generated using the cryptographically secure function ","type":"text"},{"type":"codeVoice","code":"SecRandomCopyBytes"}],"type":"paragraph"},{"level":3,"text":"Prime Number Test","type":"heading","anchor":"Prime-Number-Test"},{"inlineContent":[{"type":"text","text":"Miller-Rabin test"}],"type":"paragraph"},{"type":"heading","anchor":"Prime-Number-Generation","level":3,"text":"Prime Number Generation"},{"inlineContent":[{"text":"The algorithm from Java BigInteger translated to Swift","type":"text"}],"type":"paragraph"},{"anchor":"Factorial","level":3,"text":"Factorial","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"SplitRecursive","type":"codeVoice"},{"type":"text","text":" algorithm from Peter Luschny: "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.luschny.de"}]},{"level":3,"type":"heading","anchor":"Fibonacci","text":"Fibonacci"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"fastDoubling"},{"text":" algorithm from Project Nayuki: ","type":"text"},{"identifier":"https:\/\/www.nayuki.io","isActive":true,"type":"reference"}],"type":"paragraph"},{"text":"Jacobi and Kronecker symbols","type":"heading","anchor":"Jacobi-and-Kronecker-symbols","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Algorithm 2.3.5 from [CRANDALL]"}]},{"text":"Bernoulli Numbers","level":3,"anchor":"Bernoulli-Numbers","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Computed via Tangent numbers which is fast because it only involves integer arithmetic","type":"text"},{"text":" ","type":"text"},{"text":"but no fraction arithmetic","type":"text"}]},{"type":"heading","level":3,"text":"Chinese Remainder Theorem","anchor":"Chinese-Remainder-Theorem"},{"inlineContent":[{"type":"text","text":"The Garner algorithm 2.1.7 from [CRANDALL]"}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://BigInt/documentation/BigInt/AboutBFraction":{"identifier":"doc:\/\/BigInt\/documentation\/BigInt\/AboutBFraction","abstract":[{"text":"Signed fractions with numerator and denominator of unbounded size","type":"text"}],"url":"\/documentation\/bigint\/aboutbfraction","type":"topic","kind":"article","role":"article","title":"About BFraction"},"doc://BigInt/documentation/BigInt":{"url":"\/documentation\/bigint","abstract":[{"type":"text","text":"Signed integers and fractions of unbounded size"}],"role":"collection","type":"topic","identifier":"doc:\/\/BigInt\/documentation\/BigInt","title":"BigInt","kind":"symbol"},"doc://BigInt/documentation/BigInt/References":{"kind":"article","role":"article","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"title":"References","url":"\/documentation\/bigint\/references","identifier":"doc:\/\/BigInt\/documentation\/BigInt\/References","type":"topic"},"https://www.luschny.de":{"type":"link","url":"https:\/\/www.luschny.de","titleInlineContent":[{"type":"text","text":"https:\/\/www.luschny.de"}],"title":"https:\/\/www.luschny.de","identifier":"https:\/\/www.luschny.de"},"doc://BigInt/documentation/BigInt/AboutCRT":{"kind":"article","role":"article","identifier":"doc:\/\/BigInt\/documentation\/BigInt\/AboutCRT","title":"About CRT","url":"\/documentation\/bigint\/aboutcrt","abstract":[{"text":"Chinese Remainder Theorem","type":"text"}],"type":"topic"},"doc://BigInt/documentation/BigInt/AboutBInt":{"role":"article","identifier":"doc:\/\/BigInt\/documentation\/BigInt\/AboutBInt","type":"topic","title":"About BInt","abstract":[{"text":"Signed integers of unbounded size","type":"text"}],"url":"\/documentation\/bigint\/aboutbint","kind":"article"},"doc://BigInt/documentation/BigInt/Performance":{"role":"article","type":"topic","kind":"article","abstract":[{"type":"text","text":"Execution times for certain BigInt operations"}],"identifier":"doc:\/\/BigInt\/documentation\/BigInt\/Performance","url":"\/documentation\/bigint\/performance","title":"Performance"},"https://www.nayuki.io":{"type":"link","url":"https:\/\/www.nayuki.io","titleInlineContent":[{"type":"text","text":"https:\/\/www.nayuki.io"}],"title":"https:\/\/www.nayuki.io","identifier":"https:\/\/www.nayuki.io"}}}